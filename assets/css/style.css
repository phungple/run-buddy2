* {
    margin: 0;
    padding: 0;
    /* box-sizing calculates the width and height of each element
        border-box value calculates the width and height of the element
        by including the border and padding additions to the content box
        https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing */
    box-sizing: border-box;
}
:root { /* by placing under :root, all the elements throughout the HTML will have access to the variables */
    --primary-color: #fce138;
    --secondary-color: #024e76;
    --tertiary-color: #39a6b2;
}
/*In VS Code, you can highlight the first instance of what you're looking for and press Command+D (on macOS) 
to continually select the next instance it finds. With multiple instances selected, 
you can type and replace them all at once.*/
body {
    color: var(--tertiary-color);
    font-family: Helvetica, Arial, sans-serif;
}
header {
    padding: 20px 35px;
    background-color: var(--tertiary-color);
    display: flex;
    justify-content: space-between;
    /* flex-wrap tell the container to let child elements break onto the next line 
    when they dont fit on one line once we resize the browser window */
    flex-wrap: wrap;
    background-image: url("../images/hero-bg.jpeg");
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    background-position: 80%;
    /* always put the standardized version of a property at the end of a sequence of vendor-prefixed versions*/
    position: -webkit-sticky; /* need to use vendor prefix for Safari browser */
    position: sticky;
    top: 0; /* this property is important cuz it tells the browser where to "stick" the element.*/
    z-index: 9999;
}
header h1 {
    font-weight: bold;
    font-size: 36px;
    color: var(--primary-color);
    margin: 0;
    /*display: inline; was removed so we can use flexbox property*/
    text-shadow: 0 0 10px rgba(0,0,0,0.5); 
    /* text-shadow: <horizontal offset> <vertical offset> <radius of the shadow blur> <color>
        <color> uses rgba(0,0,0,0.5): rgb(0,0,0) is black and a(0.5) is 50% transparent.
                                      rgb(255,255,255) is white and a(0) is 100% transparent, a(1) is 0% transparent. */
}
header a {
    text-decoration: none;
    color: var(--primary-color);
}
header nav {
    /*float: right; was removed so we can use flexbox property*/
    margin: 7px 0;
}
header nav ul {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    list-style: none;
}
header nav ul li a {
    padding: 10px 15px;
    font-weight: lighter;
    /* the unit vw stands for viewport width. In this case the font size should be roughly 1.55% of 
    the window's overall width. */
    font-size: 1.5vw;
    text-shadow: 0 0 10px rgba(0,0,0,0.5);
}
header nav ul li a:hover {
    background: var(--primary-color);
    color: var(--secondary-color);
    border-radius: 15px;
    text-shadow: none;

}
footer {
    background: var(--primary-color);
    /* width 100% means it will be the full width of its parent <body> element */
    width: 100%;
    padding: 40px 35px; 
    /* the code lines below was added after removing inline display from h2 and float right from div below */
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}
footer h2 {
   /* display: inline; was removed because we will use flexbox*/
    color: var(--secondary-color);
    font-size: 30px;
    margin: 0;
}
footer div {
    /*float: right;  was removed in order to use flexbox */
    /* The line-height assigns how much vertical space should be between lines of text content. The value 1.5 means we want the spacing to be 1.5 times the size of the font. */
    line-height: 1.5;
    /*text-align allows to align the text to left, right, center, justified. By default, it is left-aligned */
    text-align: right;
}
footer a {
    color: var(--secondary-color);
}
section {
    padding: 60px;  
}

/* Hero style start */
/* Dot. notation before class "hero" below is used to indicate to the browser that we're using a class as the CSS selector.*/
.hero {
    background-image: url("../images/hero-bg.jpeg");
    /* we set background-size as cover to shrink the image so that it wont be clipped*/
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    background-position: 80%;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    /* If there is no align-items property set for a flexbox, the default is <stretch>, which 
    means all flex children will grow to the size of the tallerst one.*/
    align-items: flex-start;
}
.hero-cta {
    width: 35%;
    text-align: right;
    margin: 3.5%;
    color: #fff;
    font-size: 18px;
    line-height: 1.2;
}
.hero-cta h2 {
    font-style: italic;
    font-size: 55px;
    color: var(--primary-color);
    text-shadow: 0 0 10px rgba(0,0,0,0.5);
}

.hero-form button {
    color: var(--primary-color);
    background-color: var(--secondary-color);
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 10px;
}
.hero-form button:hover {
    background-color: var(--tertiary-color);
}
.checkbox-wrapper input, .radio-wrapper input {
    opacity: 0;
}
.checkbox-wrapper label, .radio-wrapper label {
    position: relative;/* so the radio and checkbox buttons will sit absolutely inside of labels.*/
    left: 10px;
    margin: 10px;
    line-height: 1.6;
}
.checkbox-wrapper label::before, .radio-wrapper label::before {
    content:"";
    height: 20px;
    width:20px;
    background: rgba(255,255,255,0.75);
    border: 1px solid var(--secondary-color);
    position: absolute;
    top: -4px;
    left: -30px;
}
.radio-wrapper label::before {
    border-radius: 50%;
}
.radio-wrapper label::after {
    content: "";
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--secondary-color);
    position: absolute;
    left: -29px;
    top: -3px;
    background-image: radial-gradient(circle, var(--tertiary-color), var(--secondary-color));
  }
  
  .checkbox-wrapper label::after {
    content: "";
    height: 6px;
    width: 14px;
    border-left: 2px solid var(--secondary-color);
    border-bottom: 2px solid var(--secondary-color);
    position: absolute;
    left: -26px;
    top: 1px;
    transform: rotate(-58deg);
  }
  .checkbox-wrapper input + label::after, .radio-wrapper input + label::after {
    content: none;
  }
  .checkbox-wrapper input:checked + label::after, .radio-wrapper input:checked + label::after {
    content:"";
  }

.hero-form {
    /* the values in the border property below will be: style, width, color */
    border: solid 3px var(--secondary-color);
    /* var(--primary-color) is HEX color to rgb(252,225,56) */
    background-color: rgba(252,225,56,0.8);
    padding: 20px;
    width: 40%;
    color: var(--secondary-color);
    margin: 3.5%;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    /* border-radius: <left radius> <top radius> */
    border-radius: 15px;
}
.hero-form h3 {
    font-size: 24px;
    margin: 0;
}
.hero-form p {
    margin: 5px 0 15px 0;
}
.form-input {
    border: 1px solid var(--secondary-color);
    /* the display property instructs the browser to render the element either as a <block> or inline */
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: var(--secondary-color);
    width: 100%;
    margin-bottom: 15px;
    border-radius: 10px;
    background-color: rgba(255,255,255,0.75);
}
.form-input:focus {
    background-color: rgba(255,255,255,1);
    outline: none;
}
.hero-form label {
    margin: 0 5px;
}
.section-title {
    font-size: 48px;
    color:var(--secondary-color);
    /* margin-bottom: 35px; */
    /* padding: 0 100px 20px 100px; */
    padding-bottom: 20px;
    margin: 0 auto 35px auto;
    border-bottom: 3px solid;
    text-align: center;
    width: 50%;
    /*inline-block allows it to be an inline element but things
    like padding still behave like they would on block elements.*/
    /* display: inline-block; */
}
.primary-border {
    border-color:var(--primary-color);
}
.secondary-border {
    border-color:var(--tertiary-color);
}
.intro p {
    line-height: 1.7;
    color: var(--tertiary-color);
    width: 80%;
    font-size: 20px;
    margin: 0 auto;
    text-align: center;
}
.steps {
    /* text-align: center; */
    background: var(--primary-color);
}
/* Add flexbox styles to each step */
.step {
    margin: 50px auto;
    padding-bottom: 50px;
    width: 80%;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
}
.step:not(:last-child) {
    border-bottom: 1px solid var(--tertiary-color);
}
.step h3 {
    color: var(--secondary-color);
    font-size: 46px;
    /* meaning this element will be at least 30% and will receive any extra space in the container */
    flex: 1 30%; /* flex: <flex-grow value> <flex-basic value> */
}
.step-info {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    /* this will be at least 70% wide but will receive any extra space in the container at a
    2-to-1 ratio. In other words, it will receive two more units of unused space than a sibling with a
    flex-grow value of 1 */
    flex: 2 70%;
}
.step-img {
    flex: 1 12%;
    margin-right: 20px;
}
.step-img img {
    max-width: 100%;
}
.step-text {
    flex: 12;
}
.step-text h4 {
    font-size: 26px;
    line-height: 1.5;
    color:var(--secondary-color);
}
.step-text p {
    color: var(--tertiary-color);
    font-size:18px;
}
.trainers {
    width: 100%;
    margin: 0 auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
}
.trainer {
    margin: 20px;
    background: var(--secondary-color);
    color: var(--primary-color);
    flex: 1;
    /* the overflow element below is used to tell the trainer's <article> element that it does infacet have content inside
    and that it needs to look for it and account for those two floated HTML element's sizes */
    /* overflow: auto; */
}
.trainer img {
    width: 100%;
}
.trainer-bio {
    padding: 25px;
    line-height: 1.3;
}
.trainer-bio h3 {
    font-size: 28px;
    
}
.trainer-bio h4 {
    font-weight: lighter;
    font-size: 22px;
    margin-bottom:15px;
}
.trainer-bio p {
    font-size: 17px;
}
.contact {
    /* text-align: center; */
    background: var(--secondary-color);
}
.contact h2 {
    color: var(--primary-color);
}
.contact-info {
    display:flex;
    justify-content: space-between;
    flex-wrap: wrap;
}
.contact-info > * {
    flex: 1;
    margin: 15px;
}
.contact-info iframe {
    height: 400px;
}
.contact-info div {
    /* width: 410px;
    display: inline-block;
    vertical-align: top;
    text-align: left;
    margin: 30px 0 0 60px; */
    color: white;
}
.contact-info h3 {
    color: var(--primary-color);
    font-size: 32px;
}
.contact-info p, .contact-info address {
    margin: 20px 0; 
    line-height: 1.5;
    font-size: 16px;
    font-style: normal;
}
.contact-form input, .contact-form textarea {
    border: 1px solid var(--secondary-color);
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: var(--secondary-color);
    width: 100%;
    margin-bottom: 15px;
    margin-top: 5px;
    border-radius: 10px;
    background-color: rgba(255,255,255,0.75);
}
.contact-form input:focus, .contact-form textarea:focus {
    background-color: rgba(255,255,255,1);
    outline: none;
}
.contact-form button {
    width: 100%;
    border: none;
    background: var(--primary-color);
    color:var(--secondary-color);
    text-align: center;
    padding: 15px 0;
    font-size: 16px;
    border-radius: 10px;
}
.contact-form button:hover {
    color: var(--primary-color);
    background: var(--tertiary-color);
}
.contact-info a {
    color: var(--primary-color);
}
.flex-row{
    display: flex;
}
/* MEDIA QUERY FOR SMALLER DESKTOP SCREENS AND SMALLER */
@media screen and (max-width: 980px) {
   header {
    padding-bottom: 0;
    justify-content: center;
    position: relative;
   }
   header h1 {
    width: 100%;
    text-align: center;
   }
   header nav ul {
    margin-top: 20px;
    width: 100%;
    justify-content: center;
   }
   header nav ul li a {
    font-size: 20px;
   }
   footer h2, footer div {
    text-align: center;
    width: 100%;
   }
   .hero-cta, .hero-form {
    width: 100%;
   }
   .hero-cta {
    text-align: center;
   }
   .section-title {
    width: 80%;
   }
   .trainer {
    flex: 0 70%;
   }
   .contact-info iframe {
    flex: 1 100%;
   }
}

/* MEDIA QUERY FOR TABLETS AND SMALER */
@media screen and (max-width: 768px) {
   section {
    padding: 30px 15px;
   }
   .step h3 {
    flex: 1 100%;
    text-align: center;
   }
   .step-info {
    flex: 2 100%;
    text-align: center;
    justify-content: center;
   }
   .step-img {
    flex: 0 32%;
    margin-right: 0;
    margin-top: 15px;
    margin-bottom: 15px;
   }
   .step-text {
    flex: 100%;
   }
}

/* MEDIA QUERY FOR MOBILE PHONES AND SMALLER */
@media screen and (max-width: 575px) {
    .hero-form button {
        width: 100%
    }
    .section-title {
        width: 95%;
    }
    .intro p {
        width: 100%;
    }
    .trainer {
        flex: 0 100%;
    }
    .contact-info {
        text-align: center;
    }
    .contact-info > * {
        flex: 0 100%;
    }
    .contact-form {
        order: 3;
    }
}